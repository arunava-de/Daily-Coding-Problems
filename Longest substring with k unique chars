#Given an integer k and a string s, find the length of the longest substring that contains at most k distinct characters.
max_chars = 26

def is_valid(counts, k):
    u = 0
    # Counting number of unique characters in current window
    for i in range(max_chars):
        if counts[i] > 0:
            u += 1

    return k>=u

def k_uniques(s, k):
    counts = [0]*max_chars
    n = len(s)
    u = 0

    for i in range(n):
        if counts[ord(s[i])-ord('a')] == 0:
            u += 1
        counts[ord(s[i]) - ord('a')] += 1

    if k>u:
        raise ValueError("Too few unique values in the string")

    curr_start = 0
    curr_end = 0

    window_size = 1
    window_start = 0

    counts = [0] * max_chars
    counts[ord(s[0])-ord('a')] += 1

    for i in range(1,n):
        counts[ord(s[i])-ord('a')] += 1
        curr_end += 1

        while not(is_valid(counts, k)):
            counts[ord(s[curr_start])-ord('a')] -= 1
            curr_start += 1

        if curr_end - curr_start + 1 > window_size:
            window_size = curr_end - curr_start + 1
            window_start = curr_start

    print(s[window_start:window_start+window_size])

k_uniques('abcba',2)
k_uniques('aabbcc',3)
