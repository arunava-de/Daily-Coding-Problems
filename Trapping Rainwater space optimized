# You are given an array of non-negative integers that represents a two-dimensional elevation map
# where each element is unit-width wall and the integer is the height. Suppose it will rain and
# all spots between two walls get filled up.
# Compute how many units of water remain trapped on the map in O(N) time and O(1) space.

# Below solution is O(N) time and O(1) space

def find_water(arr):
    # Instead of using arrays to maintain max on left and right, we use single variables
    n = len(arr)

    low = 0
    high = n-1
    res = 0

    left_max = 0
    right_max = 0

    while low<=high:

        if arr[low]<arr[high]:
            if arr[low]>left_max:
                left_max = arr[low]
            else:
                res += left_max - arr[low]
            low += 1

        else:
            if arr[high]>right_max:
                right_max = arr[high]
            else:
                res += right_max - arr[high]
            high -= 1

    return res

print(find_water([2,0,2]))
print(find_water([3, 0, 1, 3, 0, 5]))
