# Given a singly linked list and an integer k, remove the kth last element from the list.
# k is guaranteed to be smaller than the length of the list.
# The list is very long, so making more than one pass is prohibitively expensive.
# Do this in constant space and in one pass.

class Node(object):
    def __init__(self, v, nxt=None, par):
        self.value = v
        self.next = nxt
        self.parent = par

    def set_next(self, new_node):
        self.next = new_node
        self.next.parent = self

class LinkedList(object):
    def __init__(self, head=None):
        self.head = head

    def insert(self, val):
        # Adding node at the head of the list and pushing the others down
        node = Node(val)
        node.set_next(val)
        self.head = node

    def remove_k_last(self, k):
        # Maintain two starts, k places apart
        start1 = self.head
        start2 =  self.head
        count = k

        while start2.next!=None:
            start2 = start2.next
            count -= 1

        if count>0:
            raise ValueError("Not enough values in linked list")

        # Now start 2 is k places from start 1, now we start traversing the LL till start2.next.next = None will
        # help us stop start1 at the k-1th node

        while start2.next.next!=None:
            start1 = start1.next
            start2 = start2.next

        # Now start1 is at k-1th node
        v = start1.next.value
        start1.next = start1.next.next

        return v





