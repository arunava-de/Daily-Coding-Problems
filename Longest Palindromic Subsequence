class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        M = [[0 for i in range(n)] for i in range(n)]
        max_len = 1
        
        for i in range(n):
            M[i][i] = True
        
        start = 0 #Denoting start of longest palindromic substring
        for i in range(n-1):
            if s[i]==s[i+1]:
                M[i][i+1] = True
                start = i
                max_len = 2
        
        k = 3 #length of current substring being evaluated
        
        while k<=n:
            i = 0 #Start of potential candidate
            
            while i<n-k+1:
                j = i+k-1 #Ending index of current substring
                
                if M[i+1][j-1] and s[i]==s[j]:
                    M[i][j] = True
                    
                    if k>max_len:
                        max_len = k
                        start = i
                i += 1
            k += 1
        
        return s[start:start+max_len]
