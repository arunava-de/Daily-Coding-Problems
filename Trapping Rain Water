# You are given an array of non-negative integers that represents a two-dimensional elevation map
# where each element is unit-width wall and the integer is the height. Suppose it will rain and
# all spots between two walls get filled up.
# Compute how many units of water remain trapped on the map in O(N) time and O(1) space.

# Below solution is O(N) time and O(N) space
def find_water(A):
    n = len(A)
    # Create two arrays to store max on left and max on right
    left_max = [-10]*n
    right_max = [-10]*n

    # max = -10
    res = 0

    left[0] = A[0]
    for i in range(1,n):
        left[i] = max(left[i-1],A[i])

    right[-1] = A[-1]
    for i in range(n-2,-1,-1):
        right[i] = max(right[i+1],A[i])

    for i in range(n):
        res += min(left[i],right[i]) - A[i]

    return res

